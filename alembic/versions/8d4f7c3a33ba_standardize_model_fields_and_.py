"""Standardize model fields and relationships

Revision ID: 8d4f7c3a33ba
Revises: e3fdb9c1c8b1
Create Date: 2025-07-12 17:17:51.344206

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8d4f7c3a33ba'
down_revision: Union[str, None] = 'e3fdb9c1c8b1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('auth_users', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('auth_users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_users_email', table_name='auth_users')
    op.drop_index('ix_users_username', table_name='auth_users')
    op.create_index(op.f('ix_auth_users_email'), 'auth_users', ['email'], unique=True)
    op.create_index(op.f('ix_auth_users_username'), 'auth_users', ['username'], unique=True)
    op.add_column('blog_posts', sa.Column('user_id', sa.UUID(), nullable=True))
    # Populate user_id for existing rows
    conn = op.get_bind()
    first_user_id = conn.execute(sa.text("SELECT id FROM auth_users LIMIT 1")).scalar()
    if first_user_id:
        op.execute(sa.text(f"UPDATE blog_posts SET user_id = '{first_user_id}' WHERE user_id IS NULL"))
    else:
        raise Exception("No users found in auth_users table. Cannot set default user_id for blog_posts.")

    op.alter_column('blog_posts', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('blog_posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('blog_posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('posts_embedding_idx', table_name='blog_posts', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_constraint('fk_blog_posts_author_id', 'blog_posts', type_='foreignkey')
    op.create_foreign_key(None, 'blog_posts', 'auth_users', ['user_id'], ['id'])
    op.drop_column('blog_posts', 'author_id')
    op.drop_constraint('fk_cuan_accounts_user_id', 'cuan_accounts', type_='foreignkey')
    op.create_foreign_key(None, 'cuan_accounts', 'auth_users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('fk_cuan_categories_user_id', 'cuan_categories', type_='foreignkey')
    op.create_foreign_key(None, 'cuan_categories', 'auth_users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('fk_cuan_transactions_category_id', 'cuan_transactions', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_account_id', 'cuan_transactions', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_user_id', 'cuan_transactions', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_destination_account_id', 'cuan_transactions', type_='foreignkey')
    op.create_foreign_key(None, 'cuan_transactions', 'cuan_accounts', ['destination_account_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'cuan_transactions', 'cuan_accounts', ['account_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'cuan_transactions', 'cuan_categories', ['category_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'cuan_transactions', 'auth_users', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'cuan_transactions', type_='foreignkey')
    op.drop_constraint(None, 'cuan_transactions', type_='foreignkey')
    op.drop_constraint(None, 'cuan_transactions', type_='foreignkey')
    op.drop_constraint(None, 'cuan_transactions', type_='foreignkey')
    op.create_foreign_key('fk_cuan_transactions_destination_account_id', 'cuan_transactions', 'cuan_accounts', ['destination_account_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_user_id', 'cuan_transactions', 'auth_users', ['user_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_account_id', 'cuan_transactions', 'cuan_accounts', ['account_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_category_id', 'cuan_transactions', 'cuan_categories', ['category_id'], ['id'])
    op.drop_constraint(None, 'cuan_categories', type_='foreignkey')
    op.create_foreign_key('fk_cuan_categories_user_id', 'cuan_categories', 'auth_users', ['user_id'], ['id'])
    op.drop_constraint(None, 'cuan_accounts', type_='foreignkey')
    op.create_foreign_key('fk_cuan_accounts_user_id', 'cuan_accounts', 'auth_users', ['user_id'], ['id'])
    op.add_column('blog_posts', sa.Column('author_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'blog_posts', type_='foreignkey')
    op.create_foreign_key('fk_blog_posts_author_id', 'blog_posts', 'auth_users', ['author_id'], ['id'])
    op.create_index('posts_embedding_idx', 'blog_posts', ['embedding'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.alter_column('blog_posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('blog_posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('blog_posts', 'user_id')
    op.drop_index(op.f('ix_auth_users_username'), table_name='auth_users')
    op.drop_index(op.f('ix_auth_users_email'), table_name='auth_users')
    op.create_index('ix_users_username', 'auth_users', ['username'], unique=True)
    op.create_index('ix_users_email', 'auth_users', ['email'], unique=True)
    op.alter_column('auth_users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('auth_users', 'updated_at')
    # ### end Alembic commands ###
