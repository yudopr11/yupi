"""Refactor models and change PKs to UUID

Revision ID: e3fdb9c1c8b1
Revises: 1494e1cfce48
Create Date: 2025-07-12 12:38:48.410944

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e3fdb9c1c8b1'
down_revision: Union[str, None] = '1494e1cfce48'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TABLE posts DROP CONSTRAINT posts_author_id_fkey')
    op.execute('ALTER TABLE trx_accounts DROP CONSTRAINT trx_accounts_user_id_fkey')
    op.execute('ALTER TABLE trx_categories DROP CONSTRAINT trx_categories_user_id_fkey')
    op.execute('ALTER TABLE transactions DROP CONSTRAINT transactions_user_id_fkey')
    op.execute('ALTER TABLE transactions DROP CONSTRAINT transactions_account_id_fkey')
    op.execute('ALTER TABLE transactions DROP CONSTRAINT transactions_category_id_fkey')
    op.execute('ALTER TABLE transactions DROP CONSTRAINT transactions_destination_account_id_fkey')

    op.rename_table('users', 'auth_users')
    op.execute('ALTER TABLE auth_users RENAME COLUMN user_id TO old_id')
    op.add_column('auth_users', sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.execute('UPDATE auth_users SET id = gen_random_uuid()') # Populate with new UUIDs
    op.drop_column('auth_users', 'old_id')
    op.drop_column('auth_users', 'uuid')
    op.create_primary_key('pk_auth_users_id', 'auth_users', ['id'])
    
    op.rename_table('posts', 'blog_posts')
    op.execute('ALTER TABLE blog_posts RENAME COLUMN post_id TO old_id')
    op.add_column('blog_posts', sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.execute('UPDATE blog_posts SET id = gen_random_uuid()') # Populate with new UUIDs
    op.drop_column('blog_posts', 'old_id')
    op.drop_column('blog_posts', 'uuid')
    op.create_primary_key('pk_blog_posts_id', 'blog_posts', ['id'])
    op.execute('ALTER TABLE blog_posts RENAME COLUMN author_id TO author_id_old')
    op.add_column('blog_posts', sa.Column('author_id', sa.UUID(), nullable=True))
    
    op.alter_column('blog_posts', 'author_id', nullable=False)
    op.drop_column('blog_posts', 'author_id_old')


    op.rename_table('trx_accounts', 'cuan_accounts')
    op.execute('ALTER TABLE cuan_accounts RENAME COLUMN account_id TO old_id')
    op.add_column('cuan_accounts', sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.execute('UPDATE cuan_accounts SET id = gen_random_uuid()') # Populate with new UUIDs
    op.drop_column('cuan_accounts', 'old_id')
    op.drop_column('cuan_accounts', 'uuid')
    op.create_primary_key('pk_cuan_accounts_id', 'cuan_accounts', ['id'])
    op.execute('ALTER TABLE cuan_accounts RENAME COLUMN user_id TO user_id_old')
    op.add_column('cuan_accounts', sa.Column('user_id', sa.UUID(), nullable=True))
    
    op.alter_column('cuan_accounts', 'user_id', nullable=False)
    op.drop_column('cuan_accounts', 'user_id_old')

    op.rename_table('trx_categories', 'cuan_categories')
    op.execute('ALTER TABLE cuan_categories RENAME COLUMN category_id TO old_id')
    op.add_column('cuan_categories', sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.execute('UPDATE cuan_categories SET id = gen_random_uuid()') # Populate with new UUIDs
    op.drop_column('cuan_categories', 'old_id')
    op.drop_column('cuan_categories', 'uuid')
    op.create_primary_key('pk_cuan_categories_id', 'cuan_categories', ['id'])
    op.execute('ALTER TABLE cuan_categories RENAME COLUMN user_id TO user_id_old')
    op.add_column('cuan_categories', sa.Column('user_id', sa.UUID(), nullable=True))
    
    op.alter_column('cuan_categories', 'user_id', nullable=False)
    op.drop_column('cuan_categories', 'user_id_old')

    op.rename_table('transactions', 'cuan_transactions')
    op.execute('ALTER TABLE cuan_transactions RENAME COLUMN transaction_id TO old_id')
    op.add_column('cuan_transactions', sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.execute('UPDATE cuan_transactions SET id = gen_random_uuid()') # Populate with new UUIDs
    op.drop_column('cuan_transactions', 'old_id')
    op.drop_column('cuan_transactions', 'uuid')
    op.create_primary_key('pk_cuan_transactions_id', 'cuan_transactions', ['id'])
    op.execute('ALTER TABLE cuan_transactions RENAME COLUMN account_id TO account_id_old')
    op.add_column('cuan_transactions', sa.Column('account_id', sa.UUID(), nullable=True))
    
    op.alter_column('cuan_transactions', 'account_id', nullable=False)
    op.drop_column('cuan_transactions', 'account_id_old')

    op.execute('ALTER TABLE cuan_transactions RENAME COLUMN category_id TO category_id_old')
    op.add_column('cuan_transactions', sa.Column('category_id', sa.UUID(), nullable=True))
    
    op.drop_column('cuan_transactions', 'category_id_old')

    op.execute('ALTER TABLE cuan_transactions RENAME COLUMN destination_account_id TO destination_account_id_old')
    op.add_column('cuan_transactions', sa.Column('destination_account_id', sa.UUID(), nullable=True))
    
    op.drop_column('cuan_transactions', 'destination_account_id_old')

    op.execute('ALTER TABLE cuan_transactions RENAME COLUMN user_id TO user_id_old')
    op.add_column('cuan_transactions', sa.Column('user_id', sa.UUID(), nullable=True))
    
    op.alter_column('cuan_transactions', 'user_id', nullable=False)
    op.drop_column('cuan_transactions', 'user_id_old')

    op.create_foreign_key('fk_blog_posts_author_id', 'blog_posts', 'auth_users', ['author_id'], ['id'])
    op.create_foreign_key('fk_cuan_accounts_user_id', 'cuan_accounts', 'auth_users', ['user_id'], ['id'])
    op.create_foreign_key('fk_cuan_categories_user_id', 'cuan_categories', 'auth_users', ['user_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_user_id', 'cuan_transactions', 'auth_users', ['user_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_account_id', 'cuan_transactions', 'cuan_accounts', ['account_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_category_id', 'cuan_transactions', 'cuan_categories', ['category_id'], ['id'])
    op.create_foreign_key('fk_cuan_transactions_destination_account_id', 'cuan_transactions', 'cuan_accounts', ['destination_account_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_blog_posts_author_id', 'blog_posts', type_='foreignkey')
    op.drop_constraint('fk_cuan_accounts_user_id', 'cuan_accounts', type_='foreignkey')
    op.drop_constraint('fk_cuan_categories_user_id', 'cuan_categories', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_user_id', 'cuan_transactions', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_account_id', 'cuan_transactions', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_category_id', 'cuan_transactions', type_='foreignkey')
    op.drop_constraint('fk_cuan_transactions_destination_account_id', 'cuan_transactions', type_='foreignkey')

    op.drop_constraint('pk_auth_users_id', 'auth_users', type_='primary')
    op.drop_column('auth_users', 'id')
    op.add_column('auth_users', sa.Column('user_id', sa.Integer(), sa.Identity(), nullable=False))
    op.drop_column('auth_users', 'uuid')
    op.add_column('auth_users', sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.create_primary_key('pk_users_user_id', 'auth_users', ['user_id'])
    op.rename_table('auth_users', 'users')
    

    op.drop_constraint('pk_blog_posts_id', 'blog_posts', type_='primary')
    op.drop_column('blog_posts', 'id')
    op.add_column('blog_posts', sa.Column('post_id', sa.Integer(), sa.Identity(), nullable=False))
    op.drop_column('blog_posts', 'uuid')
    op.add_column('blog_posts', sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.drop_column('blog_posts', 'author_id')
    op.add_column('blog_posts', sa.Column('author_id', sa.Integer(), nullable=False))
    op.create_primary_key('pk_posts_post_id', 'blog_posts', ['post_id'])
    op.rename_table('blog_posts', 'posts')
    

    op.drop_constraint('pk_cuan_accounts_id', 'cuan_accounts', type_='primary')
    op.drop_column('cuan_accounts', 'id')
    op.add_column('cuan_accounts', sa.Column('account_id', sa.Integer(), sa.Identity(), nullable=False))
    op.drop_column('cuan_accounts', 'uuid')
    op.add_column('cuan_accounts', sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.drop_column('cuan_accounts', 'user_id')
    op.add_column('cuan_accounts', sa.Column('user_id', sa.Integer(), nullable=False))
    op.create_primary_key('pk_trx_accounts_account_id', 'cuan_accounts', ['account_id'])
    op.rename_table('cuan_accounts', 'trx_accounts')

    op.drop_constraint('pk_cuan_categories_id', 'cuan_categories', type_='primary')
    op.drop_column('cuan_categories', 'id')
    op.add_column('cuan_categories', sa.Column('category_id', sa.Integer(), sa.Identity(), nullable=False))
    op.drop_column('cuan_categories', 'uuid')
    op.add_column('cuan_categories', sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.drop_column('cuan_categories', 'user_id')
    op.add_column('cuan_categories', sa.Column('user_id', sa.Integer(), nullable=False))
    op.create_primary_key('pk_trx_categories_category_id', 'cuan_categories', ['category_id'])
    op.rename_table('cuan_categories', 'trx_categories')

    op.drop_constraint('pk_cuan_transactions_id', 'cuan_transactions', type_='primary')
    op.drop_column('cuan_transactions', 'id')
    op.add_column('cuan_transactions', sa.Column('transaction_id', sa.Integer(), sa.Identity(), nullable=False))
    op.drop_column('cuan_transactions', 'uuid')
    op.add_column('cuan_transactions', sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.drop_column('cuan_transactions', 'account_id')
    op.add_column('cuan_transactions', sa.Column('account_id', sa.Integer(), nullable=False))
    op.drop_column('cuan_transactions', 'category_id')
    op.add_column('cuan_transactions', sa.Column('category_id', sa.Integer(), nullable=True))
    op.drop_column('cuan_transactions', 'destination_account_id')
    op.add_column('cuan_transactions', sa.Column('destination_account_id', sa.Integer(), nullable=True))
    op.drop_column('cuan_transactions', 'user_id')
    op.add_column('cuan_transactions', sa.Column('user_id', sa.Integer(), nullable=False))
    op.create_primary_key('pk_transactions_transaction_id', 'cuan_transactions', ['transaction_id'])
    op.rename_table('cuan_transactions', 'transactions')

    op.create_foreign_key('posts_author_id_fkey', 'posts', 'users', ['author_id'], ['user_id'])
    op.create_foreign_key('trx_accounts_user_id_fkey', 'trx_accounts', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
    op.create_foreign_key('trx_categories_user_id_fkey', 'trx_categories', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
    op.create_foreign_key('transactions_user_id_fkey', 'transactions', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
    op.create_foreign_key('transactions_account_id_fkey', 'transactions', 'trx_accounts', ['account_id'], ['account_id'], ondelete='CASCADE')
    op.create_foreign_key('transactions_category_id_fkey', 'transactions', 'trx_categories', ['category_id'], ['category_id'], ondelete='SET NULL')
    op.create_foreign_key('transactions_destination_account_id_fkey', 'transactions', 'trx_accounts', ['destination_account_id'], ['account_id'], ondelete='SET NULL')
    # ### end Alembic commands ###
